"use strict";
exports.__esModule = true;
exports.Data = exports.Item = void 0;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//       bebopc version:
//           2.4.1
//
//
//       bebopc source:
//           https://github.com/RainwayApp/bebop
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
var bebop_1 = require("bebop");
exports.Item = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.x != null) {
            view.writeByte(1);
            view.writeInt32(message.x);
        }
        if (message.y != null) {
            view.writeByte(2);
            view.writeFloat64(message.y);
        }
        if (message.z != null) {
            view.writeByte(3);
            view.writeFloat64(message.z);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.x = view.readInt32();
                    break;
                case 2:
                    message.y = view.readFloat64();
                    break;
                case 3:
                    message.z = view.readFloat64();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.Data = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.items != null) {
            view.writeByte(1);
            {
                var length0 = message.items.length;
                view.writeUint32(length0);
                for (var i0 = 0; i0 < length0; i0++) {
                    exports.Item.encodeInto(message.items[i0], view);
                }
            }
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    {
                        var length0 = view.readUint32();
                        message.items = new Array(length0);
                        for (var i0 = 0; i0 < length0; i0++) {
                            var x0 = void 0;
                            x0 = exports.Item.readFrom(view);
                            message.items[i0] = x0;
                        }
                    }
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
